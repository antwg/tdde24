# =========================================================================
#  The Calendar - Functional and imperative programming in Python
#
#  Modul: cal_booking.py
#  Updated: 2004-07-30 av Peter Dalenius
#    Translated to Python 2012 by Peter L-G
#    Translated to English 2013 by Anders M.L.
#    Changes in 2020 by Jonas K (NamedTuple, type hints, ...)
#
#  Dependencies:
#    cal_abstraction.py
# =========================================================================

# This module contains lower-level calculations and functions for booking
# appointments, finding unallocated time etc. Functions here never
# operate directly on Python objects, but rather go through the primitives
# and functions provided in cal_abstraction.py.


from cal_abstraction import *


# =========================================================================
#  1. Properties of calendar contents.
# =========================================================================


def is_booked_during(cal_day: CalendarDay, ts: TimeSpan) -> bool:
    """
    Return true iff any appointment during the provided calendar day collides
    (overlaps) with the proposed time span.
    """
    return cd_any_appointment_satisfies(
        cal_day, lambda app: ts_overlap(ts, app_span(app))
    )


def is_booked_from(cal_day: CalendarDay, t: Time) -> bool:
    """
    Return true iff there is an appointment during the given day
    that starts at exactly the specific time.
    """
    return cd_any_appointment_satisfies(
        cal_day, lambda app: time_equals(t, ts_start(app_span(app)))
    )


# =========================================================================
#  2. Making and removing appointments.
# =========================================================================


def plus_appointment(
    cal_year: CalendarYear,
    day: Day,
    mon: Month,
    start: Time,
    end: Time,
    subject: Subject,
) -> CalendarYear:
    """
    Return a new CalendarYear where an appointment, specified by the parameters,
    has been added in the appropriate CalendarDay.

    This is a helper function using our internal data types.  See also the book()
    function in cal_ui.py, which provides an external user interface to be called
    by users.
    """

    # Adds a new appointment by taking apart a calendar year, inserting the
    # appointment into the correct calendar day, and then putting it back together.

    # This function does not modify any structures, but rather builds a new one.
    # The new calendar year generated by plus_appointment should then be used
    # by the caller to replace the old calendar year.

    app = new_appointment(new_time_span(start, end), subject)

    old_cal_month = cy_get_month(mon, cal_year)
    old_cal_day = cm_get_day(old_cal_month, day)

    new_cal_day = cd_plus_appointment(old_cal_day, app)
    new_cal_month = cm_plus_cd(old_cal_month, new_cal_day)
    new_cal_year = cy_plus_cm(cal_year, new_cal_month)

    return new_cal_year
